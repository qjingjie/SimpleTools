<Window x:Class="SimpleTools.Views.ZeroMQMessagePublisherWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:i="http://schemas.microsoft.com/xaml/behaviors" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:svgc="http://sharpvectors.codeplex.com/svgc/" xmlns:enums="clr-namespace:SimpleTools.Enums" xmlns:validators="clr-namespace:SimpleTools.Utilities.ValidationRules" Title="ZeroMQ Message Publisher" FontFamily="{StaticResource Ubuntu}" ResizeMode="CanResize" SizeToContent="Width" MinWidth="600" MinHeight="600" Style="{StaticResource CustomWindow}" mc:Ignorable="d">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding WindowClosingCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid Margin="20 0 20 20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="30" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!--Title-->
        <StackPanel Grid.Row="0" Orientation="Horizontal" HorizontalAlignment="Left">
            <svgc:SvgViewbox Source="/Assets/SVG/ZeroMQ-Publisher-Icon.svg" Height="45" />

            <StackPanel Margin="10">
                <TextBlock FontSize="{StaticResource Title}" FontWeight="Bold" VerticalAlignment="Center">
                    <Run Text="ZeroMQ Message" Foreground="{StaticResource Neutral-50}" />
                    <Run Text="Publisher" Foreground="{StaticResource Primary-700}" />
                </TextBlock>

                <TextBlock Text="Edit, Create, &amp; Publish Custom Messages" Foreground="{StaticResource Neutral-50}" FontWeight="Bold" FontSize="{StaticResource Body1}" Margin="0 3 0 0" />
            </StackPanel>
        </StackPanel>

        <ScrollViewer Grid.Row="2" Template="{StaticResource DefaultScrollViewer}" Margin="0 0 -15 0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="10" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition MinHeight="300" Height="*" />
                    <RowDefinition Height="10" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="10" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <!--Publisher Settings-->
                <materialDesign:Card Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="0" Background="{StaticResource Neutral-800}" UniformCornerRadius="10" HorizontalAlignment="Left">
                    <Grid Margin="10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="20" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="10" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <StackPanel Grid.Column="0" Grid.ColumnSpan="7" Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Left">
                            <materialDesign:PackIcon Kind="Settings" Foreground="{StaticResource Neutral-50}" Width="20" Height="20" />
                            <TextBlock Text="Publisher Settings" Foreground="{StaticResource Neutral-50}" FontSize="{StaticResource Heading2}" FontWeight="Bold" VerticalAlignment="Center" Margin="5 0 0 0" />
                        </StackPanel>

                        <!--Connection State-->
                        <Border Grid.Column="0" Grid.ColumnSpan="7" Grid.Row="0" Width="150" Background="{StaticResource Neutral-900}" CornerRadius="5" VerticalAlignment="Center" HorizontalAlignment="Right" Padding="0 5 0 5">
                            <TextBlock Text="{Binding ConnectionState}" FontSize="{StaticResource Heading2}" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                                <Setter Property="Foreground" Value="{StaticResource Neutral-400}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                                <Setter Property="Foreground" Value="{StaticResource Success-800}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                                <Setter Property="Foreground" Value="{StaticResource Success-800}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                                <Setter Property="Foreground" Value="{StaticResource Danger-700}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Border>

                        <!--IP Address-->
                        <StackPanel Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="2">
                            <TextBlock Text="IP Address" Foreground="{StaticResource Neutral-400}" FontFamily="{StaticResource Prompt}" FontSize="{StaticResource Body1}" Margin="5 0 0 0" />

                            <TextBox x:Name="IpAddressInput" Validation.ErrorTemplate="{StaticResource ValidationTemplate}" FontSize="{StaticResource Heading2}" MaxLength="15" materialDesign:TextFieldAssist.CharacterCounterVisibility="Hidden">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                                <Setter Property="IsReadOnly" Value="False" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                                <Setter Property="IsReadOnly" Value="True" />
                                                <Setter Property="Cursor" Value="Arrow" />
                                                <Setter Property="BorderBrush" Value="{StaticResource Primary-700}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                                <Setter Property="IsReadOnly" Value="True" />
                                                <Setter Property="Cursor" Value="Arrow" />
                                                <Setter Property="BorderBrush" Value="{StaticResource Primary-700}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                                <Setter Property="IsReadOnly" Value="False" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>

                                <TextBox.Text>
                                    <Binding Path="Ipv4" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validators:Ipv4Rule ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </StackPanel>

                        <!--Port-->
                        <StackPanel Grid.Column="4" Grid.ColumnSpan="3" Grid.Row="2">
                            <TextBlock Text="Port" Foreground="{StaticResource Neutral-400}" FontFamily="{StaticResource Prompt}" FontSize="{StaticResource Body1}" Margin="5 0 0 0" />

                            <TextBox x:Name="PortInput" Validation.ErrorTemplate="{StaticResource ValidationTemplate}" FontSize="{StaticResource Heading2}" MaxLength="5" materialDesign:TextFieldAssist.CharacterCounterVisibility="Hidden">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                                <Setter Property="IsReadOnly" Value="False" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                                <Setter Property="IsReadOnly" Value="True" />
                                                <Setter Property="Cursor" Value="Arrow" />
                                                <Setter Property="BorderBrush" Value="{StaticResource Primary-700}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                                <Setter Property="IsReadOnly" Value="True" />
                                                <Setter Property="Cursor" Value="Arrow" />
                                                <Setter Property="BorderBrush" Value="{StaticResource Primary-700}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                                <Setter Property="IsReadOnly" Value="False" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>

                                <TextBox.Text>
                                    <Binding Path="Port" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validators:PortRule ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </StackPanel>

                        <!--Connect Button-->
                        <Button Grid.Column="0" Grid.Row="4" Content="Connect" Command="{Binding ConfigurePublisherCommand}" CommandParameter="{x:Static enums:ConnectionState.Connected}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource PrimaryButton}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                            <Setter Property="IsEnabled" Value="True" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                            <Setter Property="IsEnabled" Value="True" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=IpAddressInput, Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=PortInput, Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <!--Disconnect Button-->
                        <Button Grid.Column="2" Grid.Row="4" Content="Disconnect" Command="{Binding ConfigurePublisherCommand}" CommandParameter="{x:Static enums:ConnectionState.Disconnected}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource PrimaryButton}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                            <Setter Property="IsEnabled" Value="True" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                            <Setter Property="IsEnabled" Value="True" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=IpAddressInput, Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=PortInput, Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <!--Bind Button-->
                        <Button Grid.Column="4" Grid.Row="4" Content="Bind" Command="{Binding ConfigurePublisherCommand}" CommandParameter="{x:Static enums:ConnectionState.Bind}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource PrimaryButton}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                            <Setter Property="IsEnabled" Value="True" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                            <Setter Property="IsEnabled" Value="True" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=IpAddressInput, Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=PortInput, Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <!--Unbind Button-->
                        <Button Grid.Column="6" Grid.Row="4" Content="Unbind" Command="{Binding ConfigurePublisherCommand}" CommandParameter="{x:Static enums:ConnectionState.Unbind}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource PrimaryButton}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                            <Setter Property="IsEnabled" Value="True" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                            <Setter Property="IsEnabled" Value="True" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=IpAddressInput, Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=PortInput, Path=(Validation.HasError)}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </Grid>
                </materialDesign:Card>

                <!--Message Editor-->
                <Border Grid.Column="0" Grid.Row="2" Background="{StaticResource Neutral-800}" CornerRadius="10 10 0 0">
                    <TextBlock Text="Message Editor" FontFamily="{StaticResource Prompt}" FontSize="{StaticResource Heading2}" Foreground="{StaticResource Neutral-400}" VerticalAlignment="Center" Margin="10 0 0 0" />
                </Border>

                <Border Grid.Column="0" Grid.Row="3" Background="{StaticResource Neutral-800}" CornerRadius="0 0 10 10" VerticalAlignment="Stretch" Margin="0 -5 0 0">
                    <Border Margin="5" Background="{StaticResource Neutral-900}" Padding="5" CornerRadius="7.5">
                        <TextBox Text="{Binding MessageEditorInput, UpdateSourceTrigger=PropertyChanged}" Foreground="{StaticResource Neutral-50}" Background="{StaticResource Neutral-900}" FontSize="{StaticResource Body1}" AcceptsTab="True" AcceptsReturn="True" TextWrapping="Wrap" ScrollViewer.VerticalScrollBarVisibility="Auto" BorderThickness="0" />
                    </Border>
                </Border>

                <!--Message Preview-->
                <Border Grid.Column="2" Grid.Row="2" Background="{StaticResource Neutral-700}" CornerRadius="10 10 0 0">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Preview" FontFamily="{StaticResource Prompt}" FontSize="{StaticResource Heading2}" Foreground="{StaticResource Neutral-400}" VerticalAlignment="Center" Margin="10 0 0 0" />
                        <TextBlock Text="Format" FontFamily="{StaticResource Prompt}" FontSize="{StaticResource Body1}" Foreground="{StaticResource Primary-700}" VerticalAlignment="Center" Margin="30 0 0 0" />
                        <ComboBox Style="{StaticResource PrimaryComboBox}" ItemsSource="{Binding MessageConversionOptions}" SelectedItem="{Binding SelectedOption}" FontFamily="{StaticResource Prompt}" SelectedIndex="0" DisplayMemberPath="DisplayText" Height="25" VerticalAlignment="Center" Margin="5" />
                    </StackPanel>
                </Border>

                <Border Grid.Column="2" Grid.Row="3" Background="{StaticResource Neutral-700}" CornerRadius="0 0 10 10" VerticalAlignment="Stretch" Margin="0 -5 0 0">
                    <Border Margin="5" Background="{StaticResource Neutral-800}" Padding="5" CornerRadius="7.5">
                        <TextBox Text="{Binding MessagePreview, UpdateSourceTrigger=PropertyChanged}" Background="{StaticResource Neutral-800}" FontSize="{StaticResource Body1}" AcceptsTab="True" IsReadOnly="True" AcceptsReturn="True" TextWrapping="Wrap" ScrollViewer.VerticalScrollBarVisibility="Auto" BorderThickness="0" Cursor="Arrow">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding MessageError}" Value="False">
                                            <Setter Property="Foreground" Value="{StaticResource Neutral-50}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding MessageError}" Value="True">
                                            <Setter Property="Foreground" Value="{StaticResource Warning-600}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Border>
                </Border>

                <!--Load / Save-->
                <materialDesign:Card Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="5" Background="{StaticResource Neutral-800}" UniformCornerRadius="10" HorizontalAlignment="Left">
                    <StackPanel Orientation="Horizontal" Margin="10">
                        <Button Style="{StaticResource PrimaryButton}" Command="{Binding UploadFileCommand}" ToolTip="Upload an existing message." ToolTipService.InitialShowDelay="0">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Upload" Margin="0 0 5 0" VerticalAlignment="Center" />
                                    <materialDesign:PackIcon Kind="Upload" Width="20" Height="20" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>

                        <Button Style="{StaticResource PrimaryButton}" Command="{Binding SaveFileCommand}" IsEnabled="{Binding IsSaveEnabled}" Margin="10 0 0 0" ToolTip="Save the message displayed in the &quot;Preview&quot; window to a file." ToolTipService.BetweenShowDelay="0">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Save" Margin="0 0 5 0" VerticalAlignment="Center" />
                                    <materialDesign:PackIcon Kind="Floppy" Width="20" Height="20" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </materialDesign:Card>

                <!--Publishing Mode-->
                <materialDesign:Card Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="7" Background="{StaticResource Neutral-800}" UniformCornerRadius="10" HorizontalAlignment="Left">
                    <StackPanel Margin="10">
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Left">
                            <materialDesign:PackIcon Kind="MessageArrowRight" Foreground="{StaticResource Neutral-50}" Width="20" Height="20" />
                            <TextBlock Text="Publish Message" Foreground="{StaticResource Neutral-50}" FontSize="{StaticResource Heading2}" FontWeight="Bold" VerticalAlignment="Center" Margin="5 0 0 0" />
                        </StackPanel>
                        <TextBlock Text="The published message will match the format and content shown in the 'Preview' window." Foreground="{StaticResource Warning-600}" FontSize="{StaticResource Body2}" TextWrapping="WrapWithOverflow" Margin="0 5 0 0" />

                        <!--Topic Input-->
                        <StackPanel Margin="0 10 0 0">
                            <TextBlock Text="Topic" Foreground="{StaticResource Neutral-400}" FontFamily="{StaticResource Prompt}" FontSize="{StaticResource Body1}" Margin="5 0 0 0" />
                            <TextBox Style="{StaticResource DefaultTextBox}" Text="{Binding Topic}" FontSize="{StaticResource Heading2}" />
                        </StackPanel>

                        <!--Single Publish-->
                        <materialDesign:Card Background="{StaticResource Neutral-700}" UniformCornerRadius="7.5" Margin="0 15 0 0">
                            <StackPanel Margin="10">
                                <TextBlock Text="Single Publish" Foreground="{StaticResource Neutral-50}" FontSize="{StaticResource Heading2}" FontWeight="Bold" VerticalAlignment="Center" Margin="5 0 0 15" />

                                <!--Publish Once Button-->
                                <Button Command="{Binding PublishOnceCommand}" HorizontalAlignment="Left">
                                    <Button.Content>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="Publish Once" Margin="0 0 5 0" VerticalAlignment="Center" />
                                            <materialDesign:PackIcon Kind="Play" Width="20" Height="20" VerticalAlignment="Center" />
                                        </StackPanel>
                                    </Button.Content>

                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource PrimaryButton}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                                    <Setter Property="IsEnabled" Value="False" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                                    <Setter Property="IsEnabled" Value="True" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                                    <Setter Property="IsEnabled" Value="True" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                                    <Setter Property="IsEnabled" Value="False" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding MessageError}" Value="True">
                                                    <Setter Property="IsEnabled" Value="False" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsPublishRepeatEnabled}" Value="False">
                                                    <Setter Property="IsEnabled" Value="False" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </StackPanel>
                        </materialDesign:Card>

                        <TextBlock Text="OR" Foreground="{StaticResource Neutral-400}" FontFamily="{StaticResource Prompt}" FontSize="{StaticResource Body1}" FontWeight="Bold" Margin="10" HorizontalAlignment="Center" />

                        <!--Continuous Publish-->
                        <materialDesign:Card Background="{StaticResource Neutral-700}" UniformCornerRadius="7.5">
                            <StackPanel Margin="10">
                                <TextBlock Text="Continuous Publish" Foreground="{StaticResource Neutral-50}" FontSize="{StaticResource Heading2}" FontWeight="Bold" VerticalAlignment="Center" Margin="5 0 0 15" />

                                <!--Interval Input-->
                                <TextBlock Text="Publish Interval (Ms)" Foreground="{StaticResource Neutral-400}" FontFamily="{StaticResource Prompt}" FontSize="{StaticResource Body1}" Margin="5 0 0 0" />
                                <TextBox x:Name="IntervalInput" Style="{StaticResource DefaultTextBox}" Validation.ErrorTemplate="{StaticResource ValidationTemplate}" FontSize="{StaticResource Heading2}" MaxLength="15" materialDesign:TextFieldAssist.CharacterCounterVisibility="Hidden">
                                    <TextBox.Text>
                                        <Binding Path="RepeatIntevalMs" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:NonZeroIntegerRule ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <StackPanel Orientation="Horizontal" Margin="0 15 0 0">
                                    <!--Start Button-->
                                    <Button Command="{Binding ContinuousPublishCommand}" HorizontalAlignment="Left" Margin="0 0 5 0">
                                        <Button.Content>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="Start" Margin="0 0 5 0" VerticalAlignment="Center" />
                                                <materialDesign:PackIcon Kind="Repeat" Width="20" Height="20" VerticalAlignment="Center" />
                                            </StackPanel>
                                        </Button.Content>

                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource PrimaryButton}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                                        <Setter Property="IsEnabled" Value="True" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                                        <Setter Property="IsEnabled" Value="True" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding MessageError}" Value="True">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsPublishRepeatEnabled}" Value="False">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ElementName=IntervalInput, Path=(Validation.HasError)}" Value="True">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>

                                    <!--Stop Button-->
                                    <Button Command="{Binding StopContinuousPublishCommand}" HorizontalAlignment="Left">
                                        <Button.Content>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="Stop" Margin="0 0 5 0" VerticalAlignment="Center" />
                                                <materialDesign:PackIcon Kind="Stop" Width="20" Height="20" VerticalAlignment="Center" />
                                            </StackPanel>
                                        </Button.Content>

                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource PrimaryButton}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Unconfigured}">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Connected}">
                                                        <Setter Property="IsEnabled" Value="True" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Bind}">
                                                        <Setter Property="IsEnabled" Value="True" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static enums:ConnectionState.Error}">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding MessageError}" Value="True">
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsPublishRepeatEnabled}" Value="False">
                                                        <Setter Property="IsEnabled" Value="True" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                </StackPanel>
                            </StackPanel>
                        </materialDesign:Card>
                    </StackPanel>
                </materialDesign:Card>
            </Grid>
        </ScrollViewer>
    </Grid>
</Window>